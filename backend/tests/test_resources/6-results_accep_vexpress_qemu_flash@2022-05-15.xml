<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="52" failures="3" hostname="runner-kzzanpnu-project-12501706-concurrent-0" name="pytest" skipped="33" tests="168" time="5354.616" timestamp="2022-05-15T01:32:52.112622"><testcase classname="test_bootimg.TestBootImg" name="test_bootimg_creation" time="357.659" /><testcase classname="test_build.TestBuild" name="test_default_server_certificate" time="0.024" /><testcase classname="test_build.TestBuild" name="test_certificate_split" time="8.679" /><testcase classname="test_build.TestBuild" name="test_bootloader_embed" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_image_rootfs_extra_space" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_tenant_token" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_artifact_signing_keys" time="23.969"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_state_scripts" time="0.014"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-3.2.0]" time="68.137" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-3.1.0]" time="65.600" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-3.2.1]" time="66.111" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-None]" time="42.965" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-native-3.2.0]" time="21.730" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-native-3.1.0]" time="22.632" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-native-3.2.1]" time="22.429" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-client-native-None]" time="20.464" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-3.7.0]" time="55.985" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-3.5.0]" time="57.235" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-3.7.1]" time="58.219" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-3.6.0]" time="57.585" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-3.5.1]" time="58.988" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-3.5.2]" time="56.889" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-3.6.1]" time="56.290" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-artifact-native-None]" time="35.929" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.0.1]" time="122.756" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.0.2]" time="75.670" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-2.0.1]" time="76.619" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.1.0]" time="78.373" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-2.0.0]" time="79.854" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.2.1]" time="73.945" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.0.0]" time="74.047" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.2.0]" time="74.719" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.0.3]" time="73.334" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-1.1.1]" time="76.044" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-connect-None]" time="44.745" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-configure-1.0.1]" time="71.004" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-configure-1.0.3]" time="64.336" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-configure-1.0.2]" time="70.614" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-configure-1.0.0]" time="70.649" /><testcase classname="test_build.TestBuild" name="test_preferred_versions[mender-configure-None]" time="26.019" /><testcase classname="test_build.TestBuild" name="test_multiple_device_types_compatible" time="69.256" /><testcase classname="test_build.TestBuild" name="test_various_mtd_combinations[Default-test_case0]" time="37.927" /><testcase classname="test_build.TestBuild" name="test_various_mtd_combinations[custom_mtdids-test_case1]" time="137.066" /><testcase classname="test_build.TestBuild" name="test_various_mtd_combinations[multiple_mtdids_no_selected_one-test_case2]" time="120.690" /><testcase classname="test_build.TestBuild" name="test_various_mtd_combinations[multiple_mtdids_and_selected_one-test_case3]" time="132.128" /><testcase classname="test_build.TestBuild" name="test_various_mtd_combinations[multiple_mtdparts-test_case4]" time="134.824" /><testcase classname="test_build.TestBuild" name="test_boot_partition_population" time="0.003"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_module_install" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_correct_partition_types" time="0.024"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg, gptimg, biosimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg, gptimg, biosimg)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_build_artifact_depends_and_provides[dependsprovides0]" time="126.227" /><testcase classname="test_build.TestBuild" name="test_build_artifact_depends_and_provides[dependsprovides1]" time="51.004" /><testcase classname="test_build.TestBuild" name="test_build_artifact_depends_and_provides[dependsprovides2]" time="49.240" /><testcase classname="test_build.TestBuild" name="test_build_artifact_depends_and_provides[dependsprovides3]" time="49.288" /><testcase classname="test_build.TestBuild" name="test_build_artifact_depends_and_provides[dependsprovides4]" time="51.026" /><testcase classname="test_build.TestBuild" name="test_extra_parts" time="0.002"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg, gptimg, biosimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg, gptimg, biosimg)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_build_nodbus" time="52.109"><failure message="subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake mender-client' returned non-zero exit status 1.">self = &lt;test_build.TestBuild object at 0x7f81c4cbc2b0&gt;
request = &lt;FixtureRequest for &lt;Function test_build_nodbus&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
bitbake_path = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/sysroots-uninative/x86_64-linux/usr/bin:/builds/Northern.t...r/bin:/sbin:/bin:/snap/bin:/builds/Northern.tech/Mender/go/bin:/builds/Northern.tech/Mender/mender-binary-delta/x86_64'

    @pytest.mark.min_mender_version("1.0.0")
    def test_build_nodbus(self, request, prepared_test_build, bitbake_path):
        """Test that we can remove dbus from PACKAGECONFIG, and that this causes the
        library dependency to be gone. The opposite is not tested, since we
        assume failure to link to the library will be caught in other tests that
        test DBus functionality."""
    
        build_image(
            prepared_test_build["build_dir"],
            prepared_test_build["bitbake_corebase"],
            "mender-client",
&gt;           ['PACKAGECONFIG_remove = "dbus"'],
        )

test_build.py:1154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'mender-client'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake mender-client' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</failure></testcase><testcase classname="test_build.TestBuild" name="test_mender_inventory_network_scripts" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)</skipped></testcase><testcase classname="test_build.TestBuild" name="test_mender_dbus_interface_file" time="180.100" /><testcase classname="test_dataimg.TestDataImg" name="test_dataimg_creation" time="35.815"><failure message="subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.">self = &lt;test_dataimg.TestDataImg object at 0x7f81c4d36d30&gt;
request = &lt;FixtureRequest for &lt;Function test_dataimg_creation&gt;&gt;
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
bitbake_image = 'core-image-minimal'

    @pytest.mark.min_mender_version("1.0.0")
    def test_dataimg_creation(
        self, request, bitbake_variables, prepared_test_build, bitbake_image
    ):
        """Test that we can build a dataimg successfully."""
    
        build_image(
            prepared_test_build["build_dir"],
            prepared_test_build["bitbake_corebase"],
            bitbake_image,
&gt;           ['IMAGE_FSTYPES = "dataimg"'],
        )

test_dataimg.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</failure></testcase><testcase classname="test_dbus.TestDBus" name="test_dbus_system_configuration_file" time="41.010"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_dbus.TestDBus" name="test_dbus_non_root_access" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_dbus.TestDBus" name="test_dbus_get_jwt_token" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_dbus.TestDBus" name="test_dbus_fetch_jwt_token" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_inventory.TestInventory" name="test_rootfs_type" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_inventory.TestInventory" name="test_bootloader_integration" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_inventory.TestInventory" name="test_inventory_os" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_order[2]" time="41.969"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_order[2]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
&gt;                   ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )

test_mender-artifact.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_order[3]" time="21.195"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_order[3]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
                    ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )
            else:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
&gt;                   bitbake_image,
                )

test_mender-artifact.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_files_list_integrity[2]" time="19.607"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_files_list_integrity[2]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
&gt;                   ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )

test_mender-artifact.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_files_list_integrity[3]" time="19.621"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_files_list_integrity[3]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
                    ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )
            else:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
&gt;                   bitbake_image,
                )

test_mender-artifact.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_files_checksum_integrity[2]" time="19.346"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_files_checksum_integrity[2]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
&gt;                   ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )

test_mender-artifact.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_files_checksum_integrity[3]" time="19.432"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_files_checksum_integrity[3]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
                    ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )
            else:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
&gt;                   bitbake_image,
                )

test_mender-artifact.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_artifacts_validation[2]" time="19.443"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_artifacts_validation[2]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
&gt;                   ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )

test_mender-artifact.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_artifacts_validation[3]" time="19.206"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_artifacts_validation[3]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
                    ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )
            else:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
&gt;                   bitbake_image,
                )

test_mender-artifact.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_artifacts_rootfs_size[2]" time="19.084"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_artifacts_rootfs_size[2]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
&gt;                   ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )

test_mender-artifact.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-artifact.TestMenderArtifact" name="test_artifacts_rootfs_size[3]" time="19.183"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'versioned_mender_image' for &lt;Function test_artifacts_rootfs_size[3]&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
latest_mender_image = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.mender'
bitbake_variables = {'ABIEXTENSION': 'eabi', 'ABIEXTENSION_class-nativesdk': '', 'ALLOW_EMPTY_core-image-minimal-dbg': '1', 'ALLOW_EMPTY_core-image-minimal-dev': '1', ...}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function", params=[2, 3])
    def versioned_mender_image(
        request, prepared_test_build, latest_mender_image, bitbake_variables, bitbake_image
    ):
        """Gets the correct version of the artifact, whether it's the one we
        build by default, or one we have to produce ourselves.
        Returns a tuple of version and built image."""
    
        global LAST_BUILD_VERSION
    
        version = request.param
    
        if version == 1:
            pytest.fail()
    
        if (
            version &gt;= 2
            and not version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0")
        ) or (
            version &gt;= 3
            and not version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0")
        ):
            pytest.skip("Requires version %d of mender-artifact format." % version)
    
        if version_is_minimum(bitbake_variables, "mender-artifact", "3.0.0"):
            default_version = 3
        elif version_is_minimum(bitbake_variables, "mender-artifact", "2.0.0"):
            default_version = 2
        else:
            default_version = 2
    
        if LAST_BUILD_VERSION != version:
            # Run a separate build for this artifact. This doesn't conflict with the
            # above version because the non-default version ends up in a different
            # directory.
            if version != default_version:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
                    bitbake_image,
                    ['MENDER_ARTIFACT_EXTRA_ARGS = "-v %d"' % version],
                )
            else:
                build_image(
                    prepared_test_build["build_dir"],
                    prepared_test_build["bitbake_corebase"],
&gt;                   bitbake_image,
                )

test_mender-artifact.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-connect.TestMenderConnect" name="test_mender_connect_auth_changes" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_mender-connect.TestMenderConnect" name="test_mender_connect_reconnect" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_os_integration.TestOsIntegration" name="test_syslogger" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_basic_snapshot[compression0]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_basic_snapshot[compression1]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_snapshot_device_file" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_snapshot_inactive" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_snapshot_avoid_deadlock" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_snapshot_using_mender_artifact[]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_snapshot_using_mender_artifact[screen -D -m -L -Logfile screen.log.tmp]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_snapshot_using_mender_artifact_no_sudo[]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_snapshot.TestSnapshot" name="test_snapshot_using_mender_artifact_no_sudo[screen -D -m -L -Logfile screen.log.tmp]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_ubimg.TestUbimg" name="test_total_size" time="49.339"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'ubimg_without_uboot_env' for &lt;Function test_total_size&gt;&gt;
latest_ubimg = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.ubimg'
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function")
    def ubimg_without_uboot_env(request, latest_ubimg, prepared_test_build, bitbake_image):
        """The ubireader_utils_info tool and friends don't support our UBI volumes
        that contain the U-Boot environment and hence not valid UBIFS structures.
        Therefore, make a new temporary image that doesn't contain U-Boot."""
    
        # The tests are marked with "only_with_image('ubimg')", but that is checked
        # using a function fixture, and this is a session fixture, which cannot
        # depend on that. So we need this check here to bail out if we don't find a
        # ubimg.
        if not latest_ubimg:
            pytest.skip("No ubimg found")
    
        reset_build_conf(prepared_test_build["build_dir"])
        build_image(
            prepared_test_build["build_dir"],
            prepared_test_build["bitbake_corebase"],
            bitbake_image,
&gt;           ['MENDER_FEATURES_DISABLE_append = " mender-uboot"'],
        )

test_ubimg.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_ubimg.TestUbimg" name="test_volumes" time="19.060"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'ubimg_without_uboot_env' for &lt;Function test_volumes&gt;&gt;
latest_ubimg = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.ubimg'
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function")
    def ubimg_without_uboot_env(request, latest_ubimg, prepared_test_build, bitbake_image):
        """The ubireader_utils_info tool and friends don't support our UBI volumes
        that contain the U-Boot environment and hence not valid UBIFS structures.
        Therefore, make a new temporary image that doesn't contain U-Boot."""
    
        # The tests are marked with "only_with_image('ubimg')", but that is checked
        # using a function fixture, and this is a session fixture, which cannot
        # depend on that. So we need this check here to bail out if we don't find a
        # ubimg.
        if not latest_ubimg:
            pytest.skip("No ubimg found")
    
        reset_build_conf(prepared_test_build["build_dir"])
        build_image(
            prepared_test_build["build_dir"],
            prepared_test_build["bitbake_corebase"],
            bitbake_image,
&gt;           ['MENDER_FEATURES_DISABLE_append = " mender-uboot"'],
        )

test_ubimg.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_ubimg.TestUbimg" name="test_volume_contents" time="19.430"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'ubimg_without_uboot_env' for &lt;Function test_volume_contents&gt;&gt;
latest_ubimg = '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/tmp/deploy/images/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.ubimg'
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
bitbake_image = 'core-image-minimal'

    @pytest.fixture(scope="function")
    def ubimg_without_uboot_env(request, latest_ubimg, prepared_test_build, bitbake_image):
        """The ubireader_utils_info tool and friends don't support our UBI volumes
        that contain the U-Boot environment and hence not valid UBIFS structures.
        Therefore, make a new temporary image that doesn't contain U-Boot."""
    
        # The tests are marked with "only_with_image('ubimg')", but that is checked
        # using a function fixture, and this is a session fixture, which cannot
        # depend on that. So we need this check here to bail out if we don't find a
        # ubimg.
        if not latest_ubimg:
            pytest.skip("No ubimg found")
    
        reset_build_conf(prepared_test_build["build_dir"])
        build_image(
            prepared_test_build["build_dir"],
            prepared_test_build["bitbake_corebase"],
            bitbake_image,
&gt;           ['MENDER_FEATURES_DISABLE_append = " mender-uboot"'],
        )

test_ubimg.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_ubimg.TestUbimg" name="test_equal_checksum_ubimg_and_artifact" time="20.352"><failure message="subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.">self = &lt;test_ubimg.TestUbimg object at 0x7f81c4d7bb00&gt;
request = &lt;FixtureRequest for &lt;Function test_equal_checksum_ubimg_and_artifact&gt;&gt;
prepared_test_build = {'bitbake_corebase': '/builds/Northern.tech/Mender', 'build_dir': '/builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'}
bitbake_image = 'core-image-minimal'

    @pytest.mark.min_yocto_version("warrior")
    def test_equal_checksum_ubimg_and_artifact(
        self, request, prepared_test_build, bitbake_image
    ):
    
        # See ubimg_without_uboot_env() for why this is needed. We need to do it
        # explicitly here because we need both the artifact and the ubimg.
    
        build_image(
            prepared_test_build["build_dir"],
            prepared_test_build["bitbake_corebase"],
            bitbake_image,
&gt;           ['MENDER_FEATURES_DISABLE_append = " mender-uboot"'],
        )

test_ubimg.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</failure></testcase><testcase classname="test_uboot_automation.TestUbootAutomation" name="test_uboot_compile" time="9.587"><skipped message="Skipping test_uboot_compile because u-boot commits are old and already upstream." type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/test_uboot_automation.py:195: Skipping test_uboot_compile because u-boot commits are old and already upstream.</skipped></testcase><testcase classname="test_uboot_automation.TestUbootAutomation" name="test_older_uboot_build" time="0.002"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg)</skipped></testcase><testcase classname="test_uboot_automation.TestUbootAutomation" name="test_save_mender_auto_configured_patch" time="173.363" /><testcase classname="test_uboot_automation.TestUbootAutomation" name="test_incorrect_Kconfig_setting" time="123.181" /><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Empty map-case0]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Fail in ArtifactInstall_Enter-case1]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Fail in ArtifactReboot_Enter-case2]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Fail in ArtifactCommit_Enter-case3]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Pause in ArtifactInstall_Enter-case4]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Pause in ArtifactReboot_Enter-case5]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Pause in ArtifactCommit_Enter-case6]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Expire in ArtifactInstall_Enter-case7]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Reboot and expire in ArtifactInstall_Enter-case8]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Continue, then fail in ArtifactInstall_Enter-case9]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[continue with higher priority-case10]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[force_continue with higher priority-case11]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[force_continue with lower priority-case12]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_maps[Expired and purged map-case13]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_invalid_update_control_map" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_map_cleanup[Cleanup after success-case0]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_update_control_map_cleanup[Cleanup after failure-case1]" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="test_update_control.TestUpdateControl" name="test_many_state_transitions_with_update_control" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="commercial.test_delta_update_module.TestDeltaUpdateModule" name="test_build_and_run_module" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)</skipped></testcase><testcase classname="commercial.test_delta_update_module.TestDeltaUpdateModule" name="test_runtime_checksum" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="commercial.test_delta_update_module.TestDeltaUpdateModule" name="test_perform_update" time="0.001"><error message="failed on setup with &quot;subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.&quot;">request = &lt;SubRequest 'setup_board' for &lt;Function test_dbus_system_configuration_file&gt;&gt;
qemu_wrapper = '../../meta-mender-qemu/scripts/mender-qemu'
build_image_fn = &lt;function build_image_fn.&lt;locals&gt;.img_builder at 0x7f81c41a8bf8&gt;
session_connection = &lt;Connection host=localhost user=root port=8822&gt;
board_type = 'vexpress-qemu-flash', conversion = False

    @pytest.fixture(scope="session")
    def setup_board(
        request, qemu_wrapper, build_image_fn, session_connection, board_type, conversion
    ):
    
        print("board type: ", board_type)
    
        if "qemu" in board_type:
&gt;           image_dir = build_image_fn()

image-tests/tests/utils/fixtures/fixtures.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
image-tests/tests/utils/fixtures/fixtures.py:377: in img_builder
    ['EXTRA_IMAGE_FEATURES_append = " ssh-server-openssh"',],
image-tests/tests/utils/common/common.py:403: in build_image
    _run_bitbake(bitbake_image, init_env_cmd, capture)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

target = 'core-image-minimal'
env_setup_cmd = 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3'
capture = False

    def _run_bitbake(target, env_setup_cmd, capture=False):
        cmd = "%s &amp;&amp; bitbake %s" % (env_setup_cmd, target)
        ps = run_verbose(cmd, capture=subprocess.PIPE)
        output = ""
        try:
            # Cannot use for loop here due to buffering and iterators.
            while True:
                line = ps.stdout.readline().decode()
                if not line:
                    break
    
                if line.find("is not a recognized MENDER_ variable") &gt;= 0:
                    pytest.fail(
                        "Found variable which is not in mender-vars.json: %s" % line.strip()
                    )
    
                if capture:
                    output += line
                else:
                    sys.stdout.write(line)
        finally:
            # Empty any remaining lines.
            try:
                if capture:
                    output += ps.stdout.readlines().decode()
                else:
                    ps.stdout.readlines()
            except:
                pass
            ps.wait()
            if ps.returncode != 0:
                e = subprocess.CalledProcessError(ps.returncode, cmd)
                if capture:
                    e.output = output
&gt;               raise e
E               subprocess.CalledProcessError: Command 'cd /builds/Northern.tech/Mender &amp;&amp; . oe-init-build-env /builds/Northern.tech/Mender/build-vexpress-qemu-flash/test-build-2m8fdeg3 &amp;&amp; bitbake core-image-minimal' returned non-zero exit status 1.

image-tests/tests/utils/common/common.py:440: CalledProcessError</error></testcase><testcase classname="commercial.test_mender_gateway.TestMenderGateway" name="test_build_mender_gateway" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)</skipped></testcase><testcase classname="commercial.test_monitor_addon.TestMonitorAddon" name="test_build_addon" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_total_size" time="8.827"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_partition_alignment" time="18.276"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_device_type" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_data_ownership" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_fstab_correct" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_mender_grubenv" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_split_mender_conf" time="0.539"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestMostPartitionImages" name="test_expected_data_dirs" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_part_image.TestAllPartitionImages" name="test_equal_checksum_part_image_and_artifact" time="0.537"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg, biosimg, gptimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg, biosimg, gptimg)</skipped></testcase><testcase classname="image-tests.tests.test_rootfs.TestRootfs" name="test_expected_files_ext234" time="0.009"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="image-tests.tests.test_rootfs.TestRootfs" name="test_expected_files_ext234_mender_connect" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="image-tests.tests.test_rootfs.TestRootfs" name="test_expected_files_ext234_mender_configure" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="image-tests.tests.test_rootfs.TestRootfs" name="test_expected_files_ext234_mender_monitor" time="0.001"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports ext4, ext3, ext2)</skipped></testcase><testcase classname="image-tests.tests.test_rootfs.TestRootfs" name="test_expected_files_ubifs" time="2.509" /><testcase classname="image-tests.tests.test_rootfs.TestRootfs" name="test_unconfigured_image" time="0.002"><skipped message="no supported distro feature in mender-testing-enabled, mender-image, mender-image-ubi, mender-client-install, mender-systemd, mender-ubi, mender-uboot, acl, alsa, argp, bluetooth, ext2, ipv4, ipv6, largefile, pcmcia, usbgadget, usbhost, wifi, xattr, nfs, zeroconf, pci, 3g, nfc, x11, vfat, largefile, opengl, ptest, multiarch, wayland, vulkan, pulseaudio, gobject-introspection-data, ldconfig, systemd (supports mender-convert)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:624: no supported distro feature in mender-testing-enabled, mender-image, mender-image-ubi, mender-client-install, mender-systemd, mender-ubi, mender-uboot, acl, alsa, argp, bluetooth, ext2, ipv4, ipv6, largefile, pcmcia, usbgadget, usbhost, wifi, xattr, nfs, zeroconf, pci, 3g, nfc, x11, vfat, largefile, opengl, ptest, multiarch, wayland, vulkan, pulseaudio, gobject-introspection-data, ldconfig, systemd (supports mender-convert)</skipped></testcase><testcase classname="image-tests.tests.test_secure_boot.TestSecureBoot" name="test_secure_boot_enabled" time="363.213"><skipped message="MEN-5253: Secure Boot not yet working for Yocto" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/test_secure_boot.py:24: MEN-5253: Secure Boot not yet working for Yocto</skipped></testcase><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_broken_image_update" time="104.824" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_image_update_broken_kernel" time="0.002"><skipped message="incompatible machine vexpress-qemu-flash" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:572: incompatible machine vexpress-qemu-flash</skipped></testcase><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_too_big_image_update" time="48.390" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_network_based_image_update" time="248.105" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case0]" time="18.248" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case1]" time="19.610" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case2]" time="14.523" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case3]" time="18.411" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case4]" time="14.919" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case5]" time="13.061" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case6]" time="12.387" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case7]" time="8.352" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case8]" time="11.270" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case9]" time="8.828" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case10]" time="10.495" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case11]" time="8.630" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case12]" time="9.833" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case13]" time="11.235" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case14]" time="8.539" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case15]" time="11.061" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case16]" time="9.594" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case17]" time="12.595" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case18]" time="10.902" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case19]" time="9.871" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case20]" time="10.145" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case21]" time="9.090" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case22]" time="10.496" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_signed_updates[sig_case23]" time="8.600" /><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_redundant_grub_env" time="0.002"><skipped message="no supported distro feature in mender-testing-enabled, mender-image, mender-image-ubi, mender-client-install, mender-systemd, mender-ubi, mender-uboot, acl, alsa, argp, bluetooth, ext2, ipv4, ipv6, largefile, pcmcia, usbgadget, usbhost, wifi, xattr, nfs, zeroconf, pci, 3g, nfc, x11, vfat, largefile, opengl, ptest, multiarch, wayland, vulkan, pulseaudio, gobject-introspection-data, ldconfig, systemd (supports mender-grub)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:624: no supported distro feature in mender-testing-enabled, mender-image, mender-image-ubi, mender-client-install, mender-systemd, mender-ubi, mender-uboot, acl, alsa, argp, bluetooth, ext2, ipv4, ipv6, largefile, pcmcia, usbgadget, usbhost, wifi, xattr, nfs, zeroconf, pci, 3g, nfc, x11, vfat, largefile, opengl, ptest, multiarch, wayland, vulkan, pulseaudio, gobject-introspection-data, ldconfig, systemd (supports mender-grub)</skipped></testcase><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_uboot_mender_saveenv_canary" time="0.508"><skipped message="no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)" type="pytest.skip">/builds/Northern.tech/Mender/meta-mender/tests/acceptance/image-tests/tests/utils/fixtures/fixtures.py:595: no supported filesystem in vexpress-nor, mender, mender.bmap, ubimg, mtdimg, ubimg.bmap, ubifs (supports sdimg, uefiimg)</skipped></testcase><testcase classname="image-tests.tests.test_update.TestUpdates" name="test_standalone_update_rollback" time="9.429" /><testcase classname="image-tests.tests.test_update_modules.TestUpdateModules" name="test_directory_update_module" time="20.494" /><testcase classname="image-tests.tests.test_update_modules.TestUpdateModules" name="test_single_file_update_module" time="35.343" /></testsuite></testsuites>